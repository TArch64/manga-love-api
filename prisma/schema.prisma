generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String          @unique @db.VarChar(255)
  email       String          @unique @db.VarChar(255)
  emailStatus UserEmailStatus @default(UNVERIFIED)
  password    String
  actions     UserAction[]
}

enum UserEmailStatus {
  VERIFIED
  UNVERIFIED
}

model UserAction {
  id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type   UserActionType
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String         @db.Uuid

  @@unique([userId, type])
}

enum UserActionType {
  VERIFY_EMAIL
}

model Work {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titleEn     String         @default("")
  titleUa     String         @default("")
  categories  WorkCategory[]
  thumbnail   Illustration   @relation(fields: [thumbnailId], references: [id])
  thumbnailId String         @unique @db.Uuid
}

model WorkCategory {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  textEn String @default("") @db.VarChar(255)
  textUa String @default("") @db.VarChar(255)
  work   Work   @relation(fields: [workId], references: [id])
  workId String @db.Uuid
}

model Illustration {
  id             String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  src            String
  originalWidth  Int
  originalHeight Int
  thumbnailWork  Work?
}
