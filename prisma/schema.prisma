generator client {
  provider = "prisma-client-js"
  output   = "../libs/database/src/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String          @unique @db.VarChar(255)
  email       String          @unique @db.VarChar(255)
  emailStatus UserEmailStatus @default(UNVERIFIED)
  password    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  avatar      Illustration    @relation(fields: [avatarId], references: [id])
  avatarId    String          @db.Uuid
  actions     UserAction[]
}

enum UserEmailStatus {
  VERIFIED
  UNVERIFIED
}

model UserAction {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      UserActionType
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String         @db.Uuid
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt

  @@unique([userId, type])
}

enum UserActionType {
  VERIFY_EMAIL
}

model UserDefaultAvatar {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  index        Int          @db.SmallInt @unique
  illustration Illustration @relation(fields: [id], references: [id])
}

model Work {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  titleEn     String               @default("")
  titleUa     String               @default("")
  categories  WorkCategoryOnWork[]
  thumbnail   Illustration         @relation(fields: [thumbnailId], references: [id])
  thumbnailId String               @unique @db.Uuid
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt

  @@index([titleEn, titleUa])
}

model WorkCategory {
  id        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  textEn    String               @default("") @db.VarChar(255)
  textUa    String               @default("") @db.VarChar(255)
  works     WorkCategoryOnWork[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now()) @updatedAt
}

model WorkCategoryOnWork {
  work       Work         @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId     String       @db.Uuid
  category   WorkCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String       @db.Uuid

  @@id([workId, categoryId])
}

model Illustration {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status            IllustrationStatus
  originalWidth     Int
  originalHeight    Int
  filename          String              @db.VarChar(255)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  alias             String?
  thumbnailWork     Work?
  avatarUsers        User[]
  defaultAvatarUser UserDefaultAvatar?
}

enum IllustrationStatus {
  UPLOADING
  UPLOADED
}
