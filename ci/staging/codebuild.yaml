version: 0.2

env:
  variables:
    ENV: "staging"
    DOCKER_BUILDKIT: 1
    BUILDKIT_INLINE_CACHE: 1
    CR_LABEL: "https://github.com/TArch64/manga-love-api"
    SECRETS_LOADER_DOWNLOAD: https://raw.githubusercontent.com/volunteer-delivery/secrets-loader/main/build/linux-arm64
    SECRETS_LOADER: "tmp/secrets-loader"
    ARTIFACT_DIR: "tmp/artifact"

phases:
  pre_build:
    commands:
      - curl $SECRETS_LOADER_DOWNLOAD -o $SECRETS_LOADER
      - chmod +x $SECRETS_LOADER
      - export $($SECRETS_LOADER get -r $AWS_REGION -p /manga-love-api/cr) > /dev/null
      - echo $CR_PASSWORD | docker login $CR_HOST -u $CR_USERNAME --password-stdin

      - export APP_VERSION="$CODEBUILD_BUILD_NUMBER"
      - export APP_IMAGE="$CR_HOST/$CR_USERNAME/manga-love-api"
      - export APP_NAMES=("gateway", "auth", "mailer", "work", "uploader", "bull-admin")

      - docker pull $APP_IMAGE/app-node:latest || true
      - docker pull $APP_IMAGE/app-source:latest || true
      - docker pull $APP_IMAGE/nginx:latest || true

      - |
        for APP_NAME in ${APP_NAMES[@]}; do
          docker pull $APP_IMAGE/$APP_NAME:latest || true;
        done;


  build:
    commands:
      - |
        docker build
          --tag $APP_IMAGE/app-node:latest
          --tag $APP_IMAGE/app-node:$APP_VERSION
          --file ci/$ENV/build/app-node.Dockerfile
          --cache-from $APP_IMAGE/app-node:latest
          --build-arg BUILDKIT_INLINE_CACHE
          --build-arg CR_LABEL
          .
      - docker push -a $APP_IMAGE/app-node

      - |
        docker build
          --tag $APP_IMAGE/app-source:latest
          --tag $APP_IMAGE/app-source:$APP_VERSION
          --file ci/$ENV/build/app-source.Dockerfile
          --cache-from $APP_IMAGE/app-node:latest
          --cache-from $APP_IMAGE/app-source:latest
          --build-arg BUILDKIT_INLINE_CACHE
          --build-arg CR_LABEL
          --build-arg APP_IMAGE
          --build-arg APP_VERSION
          .
      - docker push -a $APP_IMAGE/app-source

      - |
        for APP_NAME in ${APP_NAMES[@]}; do
          docker build
            --tag $APP_IMAGE/$APP_NAME:latest
            --tag $APP_IMAGE/$APP_NAME:$APP_VERSION
            --file ci/$ENV/build/microservice.Dockerfile
            --cache-from $APP_IMAGE/app-node:$APP_VERSION
            --cache-from $APP_IMAGE/app-sources:$APP_VERSION
            --cache-from $APP_IMAGE/$APP_NAME:latest
            --build-arg BUILDKIT_INLINE_CACHE
            --build-arg CR_LABEL
            --build-arg APP_NAME
            --build-arg APP_IMAGE
            --build-arg APP_VERSION
            .;
          docker push -a $APP_IMAGE/$APP_NAME;
        done;

      - |
        docker build
          --tag $APP_IMAGE/nginx:latest
          --tag $APP_IMAGE/nginx:$APP_VERSION
          --file ci/$ENV/build/nginx.Dockerfile
          --cache-from $APP_IMAGE/nginx
          --build-arg BUILDKIT_INLINE_CACHE
          --build-arg CR_LABEL
          .
      - docker push -a $APP_IMAGE/nginx



  post_build:
    commands:
      - mkdir $ARTIFACT_DIR
      - echo $APP_VERSION >> $ARTIFACT_DIR/app-version
      - envsubst < ci/$ENV/docker-compose.yaml >> $ARTIFACT_DIR/docker-compose.yaml
      - cp ci/$ENV/appspec.yml $ARTIFACT_DIR/
      - cp -r ci/$ENV/hooks $ARTIFACT_DIR/
      - cp $SECRETS_LOADER $ARTIFACT_DIR/



artifacts:
  files: ['./**/*']
  base-directory: tmp/artifact
